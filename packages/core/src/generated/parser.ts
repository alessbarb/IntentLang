// AUTO-GENERATED
/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // @generated by Peggy 5.0.6.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";
// @ts-ignore
class peg$SyntaxError extends SyntaxError {
// @ts-ignore
  constructor(message, expected, found, location) {
// @ts-ignore
    super(message);
// @ts-ignore
    this.expected = expected;
// @ts-ignore
    this.found = found;
// @ts-ignore
    this.location = location;
// @ts-ignore
    this.name = "SyntaxError";
  }

// @ts-ignore
  format(sources) {
// @ts-ignore
    let str = "Error: " + this.message;
// @ts-ignore
    if (this.location) {
// @ts-ignore
      let src = null;
// @ts-ignore
      const st = sources.find(s => s.source === this.location.source);
// @ts-ignore
      if (st) {
// @ts-ignore
        src = st.text.split(/\r\n|\n|\r/g);
      }
// @ts-ignore
      const s = this.location.start;
// @ts-ignore
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
        ? this.location.source.offset(s)
// @ts-ignore
        : s;
// @ts-ignore
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
      if (src) {
// @ts-ignore
        const e = this.location.end;
// @ts-ignore
        const filler = "".padEnd(offset_s.line.toString().length, " ");
// @ts-ignore
        const line = src[s.line - 1];
// @ts-ignore
        const last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
        const hatLen = (last - s.column) || 1;
// @ts-ignore
        str += "\n --> " + loc + "\n"
// @ts-ignore
            + filler + " |\n"
// @ts-ignore
            + offset_s.line + " | " + line + "\n"
// @ts-ignore
            + filler + " | " + "".padEnd(s.column - 1, " ")
// @ts-ignore
            + "".padEnd(hatLen, "^");
// @ts-ignore
      } else {
// @ts-ignore
        str += "\n at " + loc;
      }
    }
// @ts-ignore
    return str;
  }

// @ts-ignore
  static buildMessage(expected, found) {
// @ts-ignore
    function hex(ch) {
// @ts-ignore
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

// @ts-ignore
    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
// @ts-ignore
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
// @ts-ignore
      : null;
// @ts-ignore
    function unicodeEscape(s) {
// @ts-ignore
      if (nonPrintable) {
// @ts-ignore
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
// @ts-ignore
      return s;
    }

// @ts-ignore
    function literalEscape(s) {
// @ts-ignore
      return unicodeEscape(s
// @ts-ignore
        .replace(/\\/g, "\\\\")
// @ts-ignore
        .replace(/"/g,  "\\\"")
// @ts-ignore
        .replace(/\0/g, "\\0")
// @ts-ignore
        .replace(/\t/g, "\\t")
// @ts-ignore
        .replace(/\n/g, "\\n")
// @ts-ignore
        .replace(/\r/g, "\\r")
// @ts-ignore
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
// @ts-ignore
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

// @ts-ignore
    function classEscape(s) {
// @ts-ignore
      return unicodeEscape(s
// @ts-ignore
        .replace(/\\/g, "\\\\")
// @ts-ignore
        .replace(/\]/g, "\\]")
// @ts-ignore
        .replace(/\^/g, "\\^")
// @ts-ignore
        .replace(/-/g,  "\\-")
// @ts-ignore
        .replace(/\0/g, "\\0")
// @ts-ignore
        .replace(/\t/g, "\\t")
// @ts-ignore
        .replace(/\n/g, "\\n")
// @ts-ignore
        .replace(/\r/g, "\\r")
// @ts-ignore
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
// @ts-ignore
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

// @ts-ignore
    const DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
      literal(expectation) {
// @ts-ignore
        return "\"" + literalEscape(expectation.text) + "\"";
      },

// @ts-ignore
      class(expectation) {
// @ts-ignore
        const escapedParts = expectation.parts.map(
// @ts-ignore
          part => (Array.isArray(part)
// @ts-ignore
            ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
            : classEscape(part))
        );

// @ts-ignore
        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

// @ts-ignore
      any() {
// @ts-ignore
        return "any character";
      },

// @ts-ignore
      end() {
// @ts-ignore
        return "end of input";
      },

// @ts-ignore
      other(expectation) {
// @ts-ignore
        return expectation.description;
      },
    };

// @ts-ignore
    function describeExpectation(expectation) {
// @ts-ignore
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

// @ts-ignore
    function describeExpected(expected) {
// @ts-ignore
      const descriptions = expected.map(describeExpectation);
// @ts-ignore
      descriptions.sort();

// @ts-ignore
      if (descriptions.length > 0) {
// @ts-ignore
        let j = 1;
// @ts-ignore
        for (let i = 1; i < descriptions.length; i++) {
// @ts-ignore
          if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
            descriptions[j] = descriptions[i];
// @ts-ignore
            j++;
          }
        }
// @ts-ignore
        descriptions.length = j;
      }

// @ts-ignore
      switch (descriptions.length) {
// @ts-ignore
        case 1:
// @ts-ignore
          return descriptions[0];

// @ts-ignore
        case 2:
// @ts-ignore
          return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
        default:
// @ts-ignore
          return descriptions.slice(0, -1).join(", ")
// @ts-ignore
            + ", or "
// @ts-ignore
            + descriptions[descriptions.length - 1];
      }
    }

// @ts-ignore
    function describeFound(found) {
// @ts-ignore
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

// @ts-ignore
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  const peg$FAILED = {};
// @ts-ignore
  const peg$source = options.grammarSource;

// @ts-ignore
  const peg$startRuleFunctions = {
    start: peg$parsestart,
  };
// @ts-ignore
  let peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  const peg$c0 = "\"";
  const peg$c1 = "\\\"";
  const peg$c2 = "-";
  const peg$c3 = ".";
  const peg$c4 = "true";
  const peg$c5 = "false";
  const peg$c6 = "//";
  const peg$c7 = "\n";
  const peg$c8 = "/*";
  const peg$c9 = "*/";
  const peg$c10 = "intent";
  const peg$c11 = "tags";
  const peg$c12 = "[";
  const peg$c13 = ",";
  const peg$c14 = "]";
  const peg$c15 = "uses";
  const peg$c16 = "{";
  const peg$c17 = "}";
  const peg$c18 = ":";
  const peg$c19 = "types";
  const peg$c20 = "type";
  const peg$c21 = "=";
  const peg$c22 = "(";
  const peg$c23 = ")";
  const peg$c24 = "|";
  const peg$c25 = "where";
  const peg$c26 = "_";
  const peg$c27 = "==";
  const peg$c28 = "!=";
  const peg$c29 = ">=";
  const peg$c30 = "<=";
  const peg$c31 = "<";
  const peg$c32 = ">";
  const peg$c33 = "brand";
  const peg$c34 = "Bool";
  const peg$c35 = "Int";
  const peg$c36 = "Float";
  const peg$c37 = "String";
  const peg$c38 = "Bytes";
  const peg$c39 = "Uuid";
  const peg$c40 = "DateTime";
  const peg$c41 = "func";
  const peg$c42 = "effect";
  const peg$c43 = "test";
  const peg$c44 = "requires";
  const peg$c45 = "ensures";
  const peg$c46 = "let";
  const peg$c47 = ";";
  const peg$c48 = "return";
  const peg$c49 = "if";
  const peg$c50 = "else";
  const peg$c51 = "for";
  const peg$c52 = "in";
  const peg$c53 = "+=";
  const peg$c54 = "-=";
  const peg$c55 = "*=";
  const peg$c56 = "/=";
  const peg$c57 = "%=";
  const peg$c58 = "?";
  const peg$c59 = "||";
  const peg$c60 = "&&";
  const peg$c61 = "^";
  const peg$c62 = "&";
  const peg$c63 = "<<";
  const peg$c64 = ">>";
  const peg$c65 = "++";
  const peg$c66 = "--";
  const peg$c67 = "match";
  const peg$c68 = "Ok";
  const peg$c69 = "Err";
  const peg$c70 = "Some";
  const peg$c71 = "None";
  const peg$c72 = "=>";

  const peg$r0 = /^[0-9]/;
  const peg$r1 = /^[A-Z_a-z]/;
  const peg$r2 = /^[0-9A-Z_a-z]/;
  const peg$r3 = /^["\\"]/;
  const peg$r4 = /^[\t-\n\r ]/;
  const peg$r5 = /^[,;]/;
  const peg$r6 = /^[<>]/;
  const peg$r7 = /^[+\-]/;
  const peg$r8 = /^[%*\/]/;
  const peg$r9 = /^[!\-~]/;
  const peg$r10 = /^[ \t\n\r]/;

  const peg$e0 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e1 = peg$classExpectation([["A", "Z"], "_", ["a", "z"]], false, false, false);
  const peg$e2 = peg$classExpectation([["0", "9"], ["A", "Z"], "_", ["a", "z"]], false, false, false);
  const peg$e3 = peg$literalExpectation("\"", false);
  const peg$e4 = peg$literalExpectation("\\\"", false);
  const peg$e5 = peg$anyExpectation();
  const peg$e6 = peg$classExpectation(["\"", "\\", "\""], false, false, false);
  const peg$e7 = peg$literalExpectation("-", false);
  const peg$e8 = peg$literalExpectation(".", false);
  const peg$e9 = peg$literalExpectation("true", false);
  const peg$e10 = peg$literalExpectation("false", false);
  const peg$e11 = peg$literalExpectation("//", false);
  const peg$e12 = peg$literalExpectation("\n", false);
  const peg$e13 = peg$literalExpectation("/*", false);
  const peg$e14 = peg$literalExpectation("*/", false);
  const peg$e15 = peg$classExpectation([["\t", "\n"], "\r", " "], false, false, false);
  const peg$e16 = peg$literalExpectation("intent", false);
  const peg$e17 = peg$literalExpectation("tags", false);
  const peg$e18 = peg$literalExpectation("[", false);
  const peg$e19 = peg$literalExpectation(",", false);
  const peg$e20 = peg$literalExpectation("]", false);
  const peg$e21 = peg$literalExpectation("uses", false);
  const peg$e22 = peg$literalExpectation("{", false);
  const peg$e23 = peg$literalExpectation("}", false);
  const peg$e24 = peg$literalExpectation(":", false);
  const peg$e25 = peg$literalExpectation("types", false);
  const peg$e26 = peg$literalExpectation("type", false);
  const peg$e27 = peg$literalExpectation("=", false);
  const peg$e28 = peg$classExpectation([",", ";"], false, false, false);
  const peg$e29 = peg$literalExpectation("(", false);
  const peg$e30 = peg$literalExpectation(")", false);
  const peg$e31 = peg$literalExpectation("|", false);
  const peg$e32 = peg$literalExpectation("where", false);
  const peg$e33 = peg$literalExpectation("_", false);
  const peg$e34 = peg$literalExpectation("==", false);
  const peg$e35 = peg$literalExpectation("!=", false);
  const peg$e36 = peg$literalExpectation(">=", false);
  const peg$e37 = peg$literalExpectation("<=", false);
  const peg$e38 = peg$classExpectation(["<", ">"], false, false, false);
  const peg$e39 = peg$literalExpectation("<", false);
  const peg$e40 = peg$literalExpectation(">", false);
  const peg$e41 = peg$literalExpectation("brand", false);
  const peg$e42 = peg$literalExpectation("Bool", false);
  const peg$e43 = peg$literalExpectation("Int", false);
  const peg$e44 = peg$literalExpectation("Float", false);
  const peg$e45 = peg$literalExpectation("String", false);
  const peg$e46 = peg$literalExpectation("Bytes", false);
  const peg$e47 = peg$literalExpectation("Uuid", false);
  const peg$e48 = peg$literalExpectation("DateTime", false);
  const peg$e49 = peg$literalExpectation("func", false);
  const peg$e50 = peg$literalExpectation("effect", false);
  const peg$e51 = peg$literalExpectation("test", false);
  const peg$e52 = peg$literalExpectation("requires", false);
  const peg$e53 = peg$literalExpectation("ensures", false);
  const peg$e54 = peg$literalExpectation("let", false);
  const peg$e55 = peg$literalExpectation(";", false);
  const peg$e56 = peg$literalExpectation("return", false);
  const peg$e57 = peg$literalExpectation("if", false);
  const peg$e58 = peg$literalExpectation("else", false);
  const peg$e59 = peg$literalExpectation("for", false);
  const peg$e60 = peg$literalExpectation("in", false);
  const peg$e61 = peg$literalExpectation("+=", false);
  const peg$e62 = peg$literalExpectation("-=", false);
  const peg$e63 = peg$literalExpectation("*=", false);
  const peg$e64 = peg$literalExpectation("/=", false);
  const peg$e65 = peg$literalExpectation("%=", false);
  const peg$e66 = peg$literalExpectation("?", false);
  const peg$e67 = peg$literalExpectation("||", false);
  const peg$e68 = peg$literalExpectation("&&", false);
  const peg$e69 = peg$literalExpectation("^", false);
  const peg$e70 = peg$literalExpectation("&", false);
  const peg$e71 = peg$literalExpectation("<<", false);
  const peg$e72 = peg$literalExpectation(">>", false);
  const peg$e73 = peg$classExpectation(["+", "-"], false, false, false);
  const peg$e74 = peg$classExpectation(["%", "*", "/"], false, false, false);
  const peg$e75 = peg$classExpectation(["!", "-", "~"], false, false, false);
  const peg$e76 = peg$literalExpectation("++", false);
  const peg$e77 = peg$literalExpectation("--", false);
  const peg$e78 = peg$literalExpectation("match", false);
  const peg$e79 = peg$literalExpectation("Ok", false);
  const peg$e80 = peg$literalExpectation("Err", false);
  const peg$e81 = peg$literalExpectation("Some", false);
  const peg$e82 = peg$literalExpectation("None", false);
  const peg$e83 = peg$literalExpectation("=>", false);
  const peg$e84 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false, false);

// @ts-ignore
  let peg$currPos = options.peg$currPos | 0;
// @ts-ignore
  let peg$savedPos = peg$currPos;
// @ts-ignore
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  let peg$maxFailPos = peg$currPos;
// @ts-ignore
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
// @ts-ignore
  let peg$silentFails = options.peg$silentFails | 0;

// @ts-ignore
  let peg$result;

// @ts-ignore
  if (options.startRule) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos,
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$getUnicode(pos = peg$currPos) {
// @ts-ignore
    const cp = input.codePointAt(pos);
// @ts-ignore
    if (cp === undefined) {
// @ts-ignore
      return "";
    }
// @ts-ignore
    return String.fromCodePoint(cp);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text, ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
// @ts-ignore
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    let details = peg$posDetailsCache[pos];
// @ts-ignore
    let p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      if (pos >= peg$posDetailsCache.length) {
// @ts-ignore
        p = peg$posDetailsCache.length - 1;
// @ts-ignore
      } else {
// @ts-ignore
        p = pos;
// @ts-ignore
        while (!peg$posDetailsCache[--p]) {}
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column,
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    const startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    const endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    const res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column,
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column,
      },
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseFile();

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDigitChar() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r0.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseletter() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r1.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseident() {
// @ts-ignore
    let s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseletter();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r2.test(s4)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r2.test(s4)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestring() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c0;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c1) {
// @ts-ignore
        s5 = peg$c1;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s6 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r3.test(s6)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s5 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c1) {
// @ts-ignore
          s5 = peg$c1;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r3.test(s6)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.length > peg$currPos) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s5 = [s5, s6];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s5 = peg$c0;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseint() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseDigitChar();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = [];
// @ts-ignore
      s6 = peg$parseDigitChar();
// @ts-ignore
      while (s6 !== peg$FAILED) {
// @ts-ignore
        s5.push(s6);
// @ts-ignore
        s6 = peg$parseDigitChar();
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefloat() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseDigitChar();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = [];
// @ts-ignore
      s6 = peg$parseDigitChar();
// @ts-ignore
      while (s6 !== peg$FAILED) {
// @ts-ignore
        s5.push(s6);
// @ts-ignore
        s6 = peg$parseDigitChar();
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s7 = peg$c3;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseDigitChar();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = [];
// @ts-ignore
          s12 = peg$parseDigitChar();
// @ts-ignore
          while (s12 !== peg$FAILED) {
// @ts-ignore
            s11.push(s12);
// @ts-ignore
            s12 = peg$parseDigitChar();
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebool() {
// @ts-ignore
    let s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c4) {
// @ts-ignore
      s0 = peg$c4;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c5) {
// @ts-ignore
        s0 = peg$c5;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomment() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
      s1 = peg$c6;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
        s6 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s5 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
          s6 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s5 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c8) {
// @ts-ignore
        s1 = peg$c8;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c9) {
// @ts-ignore
          s6 = peg$c9;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s5 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c9) {
// @ts-ignore
            s6 = peg$c9;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s5 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.length > peg$currPos) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s5 = [s5, s6];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsews() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r4.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsecomment();
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r4.test(s1)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsecomment();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFile() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsews();
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseIntentSection();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseUsesSection();
// @ts-ignore
    if (s5 === peg$FAILED) {
// @ts-ignore
      s5 = null;
    }
// @ts-ignore
    s6 = peg$parse_();
// @ts-ignore
    s7 = peg$parseTypesSection();
// @ts-ignore
    if (s7 === peg$FAILED) {
// @ts-ignore
      s7 = null;
    }
// @ts-ignore
    s8 = peg$parse_();
// @ts-ignore
    s9 = [];
// @ts-ignore
    s10 = peg$parseFuncDecl();
// @ts-ignore
    if (s10 === peg$FAILED) {
// @ts-ignore
      s10 = peg$parseEffectDecl();
// @ts-ignore
      if (s10 === peg$FAILED) {
// @ts-ignore
        s10 = peg$parseTestDecl();
      }
    }
// @ts-ignore
    while (s10 !== peg$FAILED) {
// @ts-ignore
      s9.push(s10);
// @ts-ignore
      s10 = peg$parseFuncDecl();
// @ts-ignore
      if (s10 === peg$FAILED) {
// @ts-ignore
        s10 = peg$parseEffectDecl();
// @ts-ignore
        if (s10 === peg$FAILED) {
// @ts-ignore
          s10 = peg$parseTestDecl();
        }
      }
    }
// @ts-ignore
    s10 = peg$parse_();
// @ts-ignore
    s11 = peg$parsews();
// @ts-ignore
    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIntentSection() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c10) {
// @ts-ignore
      s1 = peg$c10;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parsestring();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseTagList();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTagList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c11) {
// @ts-ignore
      s1 = peg$c11;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s3 = peg$c12;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsestring();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = [];
// @ts-ignore
          s8 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s9 = peg$c13;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parsestring();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s9 = [s9, s10, s11];
// @ts-ignore
              s8 = s9;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s8;
// @ts-ignore
            s8 = peg$FAILED;
          }
// @ts-ignore
          while (s8 !== peg$FAILED) {
// @ts-ignore
            s7.push(s8);
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
              s9 = peg$c13;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parsestring();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s9 = [s9, s10, s11];
// @ts-ignore
                s8 = s9;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s9 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUsesSection() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c15) {
// @ts-ignore
      s1 = peg$c15;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s3 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = [];
// @ts-ignore
        s8 = peg$parseUseDecl();
// @ts-ignore
        while (s8 !== peg$FAILED) {
// @ts-ignore
          s7.push(s8);
// @ts-ignore
          s8 = peg$parseUseDecl();
        }
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s9 = peg$c17;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s9 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUseDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseident();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseObjectExpr();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s9 = peg$c13;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypesSection() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c19) {
// @ts-ignore
      s1 = peg$c19;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s3 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = [];
// @ts-ignore
        s8 = peg$parseTypeDecl();
// @ts-ignore
        while (s8 !== peg$FAILED) {
// @ts-ignore
          s7.push(s8);
// @ts-ignore
          s8 = peg$parseTypeDecl();
        }
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s9 = peg$c17;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s9 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c20) {
// @ts-ignore
      s1 = peg$c20;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s5 = peg$c21;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseTypeExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r5.test(s9)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e28); }
            }
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeExpr() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseUnionType();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseNonUnionType();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNonUnionType() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseRecordType();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseGenericType();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseBrandType();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseTypeRef();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseBasicType();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsestring();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeRef() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parseident();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s1 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseTypeExpr();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s5 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnionType() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
      s1 = peg$c24;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseUnionCtor();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = [];
// @ts-ignore
      s6 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
        s7 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseUnionCtor();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s7 = [s7, s8, s9];
// @ts-ignore
          s6 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s6;
// @ts-ignore
        s6 = peg$FAILED;
      }
// @ts-ignore
      while (s6 !== peg$FAILED) {
// @ts-ignore
        s5.push(s6);
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
          s7 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parseUnionCtor();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s7 = [s7, s8, s9];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnionCtor() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseRecordType();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsestring();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRecordType() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseFieldList();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s5 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFieldList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFieldDecl();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseFieldDecl();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseFieldDecl();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFieldDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseTypeExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 5) === peg$c25) {
// @ts-ignore
            s8 = peg$c25;
// @ts-ignore
            peg$currPos += 5;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseRefinementExpr();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s8 = [s8, s9, s10];
// @ts-ignore
              s7 = s8;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRefinementExpr() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseFunctionCall();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseComparison();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionCall() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsestring();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComparison() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessor();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseCompareOp();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseLiteral();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAccessor() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
      s1 = peg$c26;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s4 = peg$c3;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseident();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCompareOp() {
// @ts-ignore
    let s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
      s0 = peg$c27;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
        s0 = peg$c28;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
          s0 = peg$c29;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
            s0 = peg$c30;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r6.test(s0)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGenericType() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
        s3 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseTypeExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = [];
// @ts-ignore
          s8 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s9 = peg$c13;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseTypeExpr();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s9 = [s9, s10, s11];
// @ts-ignore
              s8 = s9;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s8;
// @ts-ignore
            s8 = peg$FAILED;
          }
// @ts-ignore
          while (s8 !== peg$FAILED) {
// @ts-ignore
            s7.push(s8);
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
              s9 = peg$c13;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parseTypeExpr();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s9 = [s9, s10, s11];
// @ts-ignore
                s8 = s9;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s9 = peg$c32;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBrandType() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBasicType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c33) {
// @ts-ignore
        s3 = peg$c33;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsestring();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBasicType() {
// @ts-ignore
    let s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c34) {
// @ts-ignore
      s0 = peg$c34;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 3) === peg$c35) {
// @ts-ignore
        s0 = peg$c35;
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c36) {
// @ts-ignore
          s0 = peg$c36;
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 6) === peg$c37) {
// @ts-ignore
            s0 = peg$c37;
// @ts-ignore
            peg$currPos += 6;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 5) === peg$c38) {
// @ts-ignore
              s0 = peg$c38;
// @ts-ignore
              peg$currPos += 5;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e46); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 4) === peg$c39) {
// @ts-ignore
                s0 = peg$c39;
// @ts-ignore
                peg$currPos += 4;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e47); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 8) === peg$c40) {
// @ts-ignore
                  s0 = peg$c40;
// @ts-ignore
                  peg$currPos += 8;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e48); }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFuncDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c41) {
// @ts-ignore
      s1 = peg$c41;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c22;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseParamList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s9 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
              s11 = peg$c18;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s11 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseTypeExpr();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse_();
// @ts-ignore
                s15 = peg$parseContractBlock();
// @ts-ignore
                s16 = peg$parse_();
// @ts-ignore
                s17 = peg$parseBlock();
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEffectDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c42) {
// @ts-ignore
      s1 = peg$c42;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c22;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseParamList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s9 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
              s11 = peg$c18;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s11 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseTypeExpr();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse_();
// @ts-ignore
                s15 = peg$parseContractBlock();
// @ts-ignore
                s16 = peg$parse_();
// @ts-ignore
                if (input.substr(peg$currPos, 4) === peg$c15) {
// @ts-ignore
                  s17 = peg$c15;
// @ts-ignore
                  peg$currPos += 4;
// @ts-ignore
                } else {
// @ts-ignore
                  s17 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e21); }
                }
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  s18 = peg$parse_();
// @ts-ignore
                  s19 = peg$parseident();
// @ts-ignore
                  if (s19 !== peg$FAILED) {
// @ts-ignore
                    s20 = peg$parse_();
// @ts-ignore
                    s21 = [];
// @ts-ignore
                    s22 = peg$currPos;
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
                      s23 = peg$c13;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s23 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e19); }
                    }
// @ts-ignore
                    if (s23 !== peg$FAILED) {
// @ts-ignore
                      s24 = peg$parse_();
// @ts-ignore
                      s25 = peg$parseident();
// @ts-ignore
                      if (s25 !== peg$FAILED) {
// @ts-ignore
                        s23 = [s23, s24, s25];
// @ts-ignore
                        s22 = s23;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s22;
// @ts-ignore
                        s22 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s22;
// @ts-ignore
                      s22 = peg$FAILED;
                    }
// @ts-ignore
                    while (s22 !== peg$FAILED) {
// @ts-ignore
                      s21.push(s22);
// @ts-ignore
                      s22 = peg$currPos;
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
                        s23 = peg$c13;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s23 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e19); }
                      }
// @ts-ignore
                      if (s23 !== peg$FAILED) {
// @ts-ignore
                        s24 = peg$parse_();
// @ts-ignore
                        s25 = peg$parseident();
// @ts-ignore
                        if (s25 !== peg$FAILED) {
// @ts-ignore
                          s23 = [s23, s24, s25];
// @ts-ignore
                          s22 = s23;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s22;
// @ts-ignore
                          s22 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s22;
// @ts-ignore
                        s22 = peg$FAILED;
                      }
                    }
// @ts-ignore
                    s22 = peg$parse_();
// @ts-ignore
                    s23 = peg$parseBlock();
// @ts-ignore
                    if (s23 !== peg$FAILED) {
// @ts-ignore
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23];
// @ts-ignore
                      s0 = s1;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTestDecl() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c43) {
// @ts-ignore
      s1 = peg$c43;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseBlock();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseParamList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseParam();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseParam();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseParam();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseParam() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseTypeExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseContractBlock() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8) === peg$c44) {
// @ts-ignore
      s2 = peg$c44;
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseAssignExpr();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7) === peg$c45) {
// @ts-ignore
      s4 = peg$c45;
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s4 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s6 = peg$parseAssignExpr();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5, s6];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s3;
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s1 = [s1, s2, s3];
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlock() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parsews();
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = [];
// @ts-ignore
      s6 = peg$parseStmt();
// @ts-ignore
      while (s6 !== peg$FAILED) {
// @ts-ignore
        s5.push(s6);
// @ts-ignore
        s6 = peg$parseStmt();
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s7 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStmt() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseLetStmt();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseReturnStmt();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseIfStmt();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseMatchStmt();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseForStmt();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseExprStmt();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLetStmt() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c46) {
// @ts-ignore
      s1 = peg$c46;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s5 = peg$c21;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAssignExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s9 = peg$c47;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e55); }
            }
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseReturnStmt() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c48) {
// @ts-ignore
      s1 = peg$c48;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAssignExpr();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s5 = peg$c47;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfStmt() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c49) {
// @ts-ignore
      s1 = peg$c49;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAssignExpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseBlock();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 4) === peg$c50) {
// @ts-ignore
            s8 = peg$c50;
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseBlock();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s8 = [s8, s9, s10];
// @ts-ignore
              s7 = s8;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMatchStmt() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMatchExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s3 = peg$c47;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseForStmt() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c51) {
// @ts-ignore
      s1 = peg$c51;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
          s5 = peg$c52;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAssignExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseBlock();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
              s0 = s1;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExprStmt() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAssignExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s3 = peg$c47;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCondExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseAssignOp();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseCondExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseAssignOp();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseCondExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignOp() {
// @ts-ignore
    let s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
      s0 = peg$c21;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c53) {
// @ts-ignore
        s0 = peg$c53;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
          s0 = peg$c54;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
            s0 = peg$c55;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c56) {
// @ts-ignore
              s0 = peg$c56;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c57) {
// @ts-ignore
                s0 = peg$c57;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e65); }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCondExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseOrExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
        s4 = peg$c58;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseAssignExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
            s8 = peg$c18;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseAssignExpr();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7, s8, s9, s10];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOrExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAndExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c59) {
// @ts-ignore
        s5 = peg$c59;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseAndExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c59) {
// @ts-ignore
          s5 = peg$c59;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAndExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAndExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitOrExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c60) {
// @ts-ignore
        s5 = peg$c60;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseBitOrExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c60) {
// @ts-ignore
          s5 = peg$c60;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseBitOrExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitOrExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitXorExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
        s5 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseBitXorExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
          s5 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseBitXorExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitXorExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBitAndExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
        s5 = peg$c61;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseBitAndExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
          s5 = peg$c61;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseBitAndExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBitAndExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseEqualityExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
        s5 = peg$c62;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseEqualityExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
          s5 = peg$c62;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseEqualityExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRelExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
        s5 = peg$c27;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
          s5 = peg$c28;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseRelExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
          s5 = peg$c27;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
            s5 = peg$c28;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRelExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseShiftExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
        s5 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
          s5 = peg$c30;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s5 = peg$c32;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
              s5 = peg$c29;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseShiftExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
          s5 = peg$c31;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
            s5 = peg$c30;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s5 = peg$c32;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
                s5 = peg$c29;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e36); }
              }
            }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseShiftExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseShiftExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAddExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c63) {
// @ts-ignore
        s5 = peg$c63;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c64) {
// @ts-ignore
          s5 = peg$c64;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseAddExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c63) {
// @ts-ignore
          s5 = peg$c63;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c64) {
// @ts-ignore
            s5 = peg$c64;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e72); }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAddExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAddExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMulExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r7.test(s5)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseMulExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r7.test(s5)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseMulExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMulExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseUnaryExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r8.test(s5)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseUnaryExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r8.test(s5)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e74); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseUnaryExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryExpr() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c65) {
// @ts-ignore
        s1 = peg$c65;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c66) {
// @ts-ignore
          s1 = peg$c66;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseUnaryExpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsePostfixExpr();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePostfixExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePrimary();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c65) {
// @ts-ignore
        s4 = peg$c65;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c66) {
// @ts-ignore
          s4 = peg$c66;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s5 = peg$c22;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse_();
// @ts-ignore
            s7 = peg$parseArgList();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = null;
            }
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s9 = peg$c23;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s4 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
              s5 = peg$c3;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse_();
// @ts-ignore
              s7 = peg$parseident();
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s5 = [s5, s6, s7];
// @ts-ignore
                s4 = s5;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s4;
// @ts-ignore
                s4 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
          }
        }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c65) {
// @ts-ignore
          s4 = peg$c65;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e76); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c66) {
// @ts-ignore
            s4 = peg$c66;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e77); }
          }
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s4 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
              s5 = peg$c22;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse_();
// @ts-ignore
              s7 = peg$parseArgList();
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                s7 = null;
              }
// @ts-ignore
              s8 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                s9 = peg$c23;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e30); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s5 = [s5, s6, s7, s8, s9];
// @ts-ignore
                s4 = s5;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s4;
// @ts-ignore
                s4 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
            if (s4 === peg$FAILED) {
// @ts-ignore
              s4 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
                s5 = peg$c3;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                s6 = peg$parse_();
// @ts-ignore
                s7 = peg$parseident();
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s5 = [s5, s6, s7];
// @ts-ignore
                  s4 = s5;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s4;
// @ts-ignore
                  s4 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s4;
// @ts-ignore
                s4 = peg$FAILED;
              }
            }
          }
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArgList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAssignExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseAssignExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAssignExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePrimary() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parseLiteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseident();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s1 = peg$c22;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse_();
// @ts-ignore
          s3 = peg$parseAssignExpr();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s5 = peg$c23;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
              s0 = s1;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseObjectExpr();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseVariantExpr();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseArrayExpr();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseMatchExpr();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseResultOkExpr();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parseResultErrExpr();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseOptionSomeExpr();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$parseOptionNoneExpr();
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$parseBrandCastExpr();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseObjectExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseRecordFieldList();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s5 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariantExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s3 = peg$c16;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRecordFieldList();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s7 = peg$c17;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArrayExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c12;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseAssignExpr();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = [];
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s8 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseAssignExpr();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s8 = [s8, s9, s10];
// @ts-ignore
            s7 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        while (s7 !== peg$FAILED) {
// @ts-ignore
          s6.push(s7);
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s8 = peg$c13;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseAssignExpr();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s8 = [s8, s9, s10];
// @ts-ignore
              s7 = s8;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
        }
// @ts-ignore
        s4 = [s4, s5, s6];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
        s5 = peg$c14;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMatchExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c67) {
// @ts-ignore
      s1 = peg$c67;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAssignExpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s5 = peg$c16;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = [];
// @ts-ignore
          s8 = peg$parseCaseClause();
// @ts-ignore
          while (s8 !== peg$FAILED) {
// @ts-ignore
            s7.push(s8);
// @ts-ignore
            s8 = peg$parseCaseClause();
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
            s9 = peg$c17;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRecordFieldList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRecordField();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseRecordField();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRecordField();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRecordField() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s4 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseAssignExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseResultOkExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c68) {
// @ts-ignore
      s1 = peg$c68;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAssignExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseResultErrExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c69) {
// @ts-ignore
      s1 = peg$c69;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAssignExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOptionSomeExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c70) {
// @ts-ignore
      s1 = peg$c70;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAssignExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c23;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2, s3, s4, s5, s6, s7];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOptionNoneExpr() {
// @ts-ignore
    let s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c71) {
// @ts-ignore
      s0 = peg$c71;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBrandCastExpr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c33) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
        s3 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseident();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s7 = peg$c32;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
              s9 = peg$c22;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parseAssignExpr();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parse_();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                  s13 = peg$c23;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s13 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e30); }
                }
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCaseClause() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePattern();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c49) {
// @ts-ignore
        s4 = peg$c49;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseAssignExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c72) {
// @ts-ignore
        s5 = peg$c72;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseAssignExpr();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseBlock();
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r5.test(s9)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLiteral() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parsestring();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsefloat();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseint();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsebool();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePattern() {
// @ts-ignore
    let s0;

// @ts-ignore
    s0 = peg$parseLiteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseVariantPattern();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariantPattern() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseRecordPattern();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRecordPattern() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parsePatternFieldList();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s5 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePatternFieldList() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePatternField();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parsePatternField();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parsePatternField();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePatternField() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s4 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseident();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r10.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r10.test(s1)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
    }
// @ts-ignore
    peg$silentFails--;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
// @ts-ignore
  function peg$throw() {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
// @ts-ignore
  if (options.peg$library) {
// @ts-ignore
    return /** @type {any} */ ({
// @ts-ignore
      peg$result,
// @ts-ignore
      peg$currPos,
// @ts-ignore
      peg$FAILED,
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos,
// @ts-ignore
      peg$success,
// @ts-ignore
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
// @ts-ignore
  if (peg$success) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    peg$throw();
  }
}
// @ts-ignore
  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = File;
export type DigitChar = string;
export type Letter = string;
export type Ident = [Letter, _, string[]];
export type String_1 = [
  '"',
  _,
  (['\\"', string] | [undefined, string])[],
  _,
  '"'
];
export type Int = ["-" | null, _, DigitChar, _, DigitChar[]];
export type Float = [
  "-" | null,
  _,
  DigitChar,
  _,
  DigitChar[],
  _,
  ".",
  _,
  DigitChar,
  _,
  DigitChar[]
];
export type Bool = "true" | "false";
export type Comment =
  | ["//", _, [undefined, string][]]
  | ["/*", _, [undefined, string][]];
export type Ws = (string | Comment)[];
export type File = [
  Ws,
  _,
  IntentSection | null,
  _,
  UsesSection | null,
  _,
  TypesSection | null,
  _,
  (FuncDecl | EffectDecl | TestDecl)[],
  _,
  Ws
];
export type IntentSection = ["intent", _, String_1, _, TagList | null];
export type TagList = [
  "tags",
  _,
  "[",
  _,
  String_1,
  _,
  [",", _, String_1][],
  _,
  "]"
];
export type UsesSection = ["uses", _, "{", _, Ws, _, UseDecl[], _, "}"];
export type UseDecl = [
  Ident,
  _,
  ":",
  _,
  Ident,
  _,
  ObjectExpr | null,
  _,
  "," | null
];
export type TypesSection = ["types", _, "{", _, Ws, _, TypeDecl[], _, "}"];
export type TypeDecl = [
  "type",
  _,
  Ident,
  _,
  "=",
  _,
  TypeExpr,
  _,
  string | null
];
export type TypeExpr = UnionType | NonUnionType;
export type NonUnionType =
  | RecordType
  | GenericType
  | BrandType
  | TypeRef
  | BasicType
  | String_1;
export type TypeRef = Ident | ["(", _, TypeExpr, _, ")"];
export type UnionType = ["|" | null, _, UnionCtor, _, ["|", _, UnionCtor][]];
export type UnionCtor = [Ident, _, RecordType | null] | String_1;
export type RecordType = ["{", _, FieldList | null, _, "}"];
export type FieldList = [FieldDecl, _, [",", _, FieldDecl][], _, "," | null];
export type FieldDecl = [
  Ident,
  _,
  ":",
  _,
  TypeExpr,
  _,
  ["where", _, RefinementExpr] | null
];
export type RefinementExpr = FunctionCall | Comparison;
export type FunctionCall = [Ident, _, "(", _, String_1, _, ")"];
export type Comparison = [Accessor, _, CompareOp, _, Literal];
export type Accessor = ["_", _, [".", _, Ident] | null];
export type CompareOp = "==" | "!=" | ">=" | "<=" | string;
export type GenericType = [
  Ident,
  _,
  "<",
  _,
  TypeExpr,
  _,
  [",", _, TypeExpr][],
  _,
  ">"
];
export type BrandType = [BasicType, _, "brand", _, String_1];
export type BasicType =
  | "Bool"
  | "Int"
  | "Float"
  | "String"
  | "Bytes"
  | "Uuid"
  | "DateTime";
export type FuncDecl = [
  "func",
  _,
  Ident,
  _,
  "(",
  _,
  ParamList | null,
  _,
  ")",
  _,
  ":",
  _,
  TypeExpr,
  _,
  ContractBlock | null,
  _,
  Block
];
export type EffectDecl = [
  "effect",
  _,
  Ident,
  _,
  "(",
  _,
  ParamList | null,
  _,
  ")",
  _,
  ":",
  _,
  TypeExpr,
  _,
  ContractBlock | null,
  _,
  "uses",
  _,
  Ident,
  _,
  [",", _, Ident][],
  _,
  Block
];
export type TestDecl = ["test", _, Ident, _, Block];
export type ParamList = [Param, _, [",", _, Param][]];
export type Param = [Ident, _, ":", _, TypeExpr];
export type ContractBlock = [
  ["requires", _, AssignExpr] | null,
  _,
  ["ensures", _, AssignExpr] | null
];
export type Block = ["{", _, Ws, _, Stmt[], _, "}"];
export type Stmt =
  | LetStmt
  | ReturnStmt
  | IfStmt
  | MatchStmt
  | ForStmt
  | ExprStmt;
export type LetStmt = ["let", _, Ident, _, "=", _, AssignExpr, _, ";" | null];
export type ReturnStmt = ["return", _, AssignExpr | null, _, ";" | null];
export type IfStmt = [
  "if",
  _,
  AssignExpr,
  _,
  Block,
  _,
  ["else", _, Block] | null
];
export type MatchStmt = [MatchExpr, _, ";" | null];
export type ForStmt = ["for", _, Ident, _, "in", _, AssignExpr, _, Block];
export type ExprStmt = [AssignExpr, _, ";" | null];
export type AssignExpr = [CondExpr, _, [AssignOp, _, CondExpr][]];
export type AssignOp = "=" | "+=" | "-=" | "*=" | "/=" | "%=";
export type CondExpr = [
  OrExpr,
  _,
  ["?", _, AssignExpr, _, ":", _, AssignExpr] | null
];
export type OrExpr = [AndExpr, _, ["||", _, AndExpr][]];
export type AndExpr = [BitOrExpr, _, ["&&", _, BitOrExpr][]];
export type BitOrExpr = [BitXorExpr, _, ["|", _, BitXorExpr][]];
export type BitXorExpr = [BitAndExpr, _, ["^", _, BitAndExpr][]];
export type BitAndExpr = [EqualityExpr, _, ["&", _, EqualityExpr][]];
export type EqualityExpr = [RelExpr, _, ["==" | "!=", _, RelExpr][]];
export type RelExpr = [ShiftExpr, _, ["<" | "<=" | ">" | ">=", _, ShiftExpr][]];
export type ShiftExpr = [AddExpr, _, ["<<" | ">>", _, AddExpr][]];
export type AddExpr = [MulExpr, _, [string, _, MulExpr][]];
export type MulExpr = [UnaryExpr, _, [string, _, UnaryExpr][]];
export type UnaryExpr = [string | "++" | "--", _, UnaryExpr] | PostfixExpr;
export type PostfixExpr = [
  Primary,
  _,
  ("++" | "--" | ["(", _, ArgList | null, _, ")"] | [".", _, Ident])[]
];
export type ArgList = [AssignExpr, _, [",", _, AssignExpr][]];
export type Primary =
  | Literal
  | Ident
  | ["(", _, AssignExpr, _, ")"]
  | ObjectExpr
  | VariantExpr
  | ArrayExpr
  | MatchExpr
  | ResultOkExpr
  | ResultErrExpr
  | OptionSomeExpr
  | OptionNoneExpr
  | BrandCastExpr;
export type ObjectExpr = ["{", _, RecordFieldList | null, _, "}"];
export type VariantExpr = [Ident, _, "{", _, RecordFieldList | null, _, "}"];
export type ArrayExpr = [
  "[",
  _,
  [AssignExpr, _, [",", _, AssignExpr][]] | null,
  _,
  "]"
];
export type MatchExpr = [
  "match",
  _,
  AssignExpr,
  _,
  "{",
  _,
  CaseClause[],
  _,
  "}"
];
export type RecordFieldList = [
  RecordField,
  _,
  [",", _, RecordField][],
  _,
  "," | null
];
export type RecordField = [Ident, _, [":", _, AssignExpr] | null];
export type ResultOkExpr = ["Ok", _, "(", _, AssignExpr, _, ")"];
export type ResultErrExpr = ["Err", _, "(", _, AssignExpr, _, ")"];
export type OptionSomeExpr = ["Some", _, "(", _, AssignExpr, _, ")"];
export type OptionNoneExpr = "None";
export type BrandCastExpr = [
  "brand",
  _,
  "<",
  _,
  Ident,
  _,
  ">",
  _,
  "(",
  _,
  AssignExpr,
  _,
  ")"
];
export type CaseClause = [
  Pattern,
  _,
  ["if", _, AssignExpr] | null,
  _,
  "=>",
  _,
  AssignExpr | Block,
  _,
  string | null
];
export type Literal = String_1 | Float | Int | Bool;
export type Pattern = Literal | VariantPattern;
export type VariantPattern = [Ident, _, RecordPattern | null];
export type RecordPattern = ["{", _, PatternFieldList | null, _, "}"];
export type PatternFieldList = [
  PatternField,
  _,
  [",", _, PatternField][],
  _,
  "," | null
];
export type PatternField = [Ident, _, [":", _, Ident] | null];
export type _ = string[];
