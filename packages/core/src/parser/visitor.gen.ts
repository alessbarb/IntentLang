// @generated
// This file is auto-generated by scripts/gen-visitor.mjs.

import type { IntentLangVisitor } from "../generated/grammar/IntentLangVisitor.js";
import type { AdditiveExprContext, AndExprContext, AssignmentExprContext, BlockContext, EffectDeclContext, EqualityExprContext, ExprContext, FieldContext, FileContext, FuncDeclContext, IntentSectionContext, ItemContext, LiteralContext, LiteralTypeContext, MultiplicativeExprContext, NamedTypeContext, OrExprContext, ParamContext, ParamsContext, PrimaryExprContext, ProgramContext, RecordTypeContext, RelationalExprContext, StmtContext, StringLiteralContext, TagListContext, TestDeclContext, TupleTypeContext, TypeAtomContext, TypeDeclContext, TypeExprContext, TypesSectionContext, UnaryExprContext, UnionTypeContext, UseDeclContext, UsesSectionContext } from "../generated/grammar/IntentLangParser.js";
import type { ParserRuleContext } from "antlr4ts/ParserRuleContext.js";
import { TerminalNode } from "antlr4ts/tree/TerminalNode.js";
import { ErrorNode } from "antlr4ts/tree/ErrorNode.js";
import type { Node as AstNode } from "../ast.js";

type Node = AstNode<string>;
export class AstBuilderVisitorBase implements IntentLangVisitor<Node> {
  visit(ctx: ParserRuleContext): Node {
    return ctx.accept(this);
  }

  visitChildren(node: ParserRuleContext): Node {
    throw new Error('visitChildren not implemented');
  }

  visitTerminal(node: TerminalNode): Node {
    throw new Error('visitTerminal not implemented');
  }

  visitErrorNode(node: ErrorNode): Node {
    throw new Error('visitErrorNode not implemented');
  }
  visitFile(ctx: FileContext): Node {
    throw new Error('visitFile not implemented');
  }

  visitProgram(ctx: ProgramContext): Node {
    throw new Error('visitProgram not implemented');
  }

  visitIntentSection(ctx: IntentSectionContext): Node {
    throw new Error('visitIntentSection not implemented');
  }

  visitTagList(ctx: TagListContext): Node {
    throw new Error('visitTagList not implemented');
  }

  visitUsesSection(ctx: UsesSectionContext): Node {
    throw new Error('visitUsesSection not implemented');
  }

  visitTypesSection(ctx: TypesSectionContext): Node {
    throw new Error('visitTypesSection not implemented');
  }

  visitUseDecl(ctx: UseDeclContext): Node {
    throw new Error('visitUseDecl not implemented');
  }

  visitTypeDecl(ctx: TypeDeclContext): Node {
    throw new Error('visitTypeDecl not implemented');
  }

  visitTypeExpr(ctx: TypeExprContext): Node {
    throw new Error('visitTypeExpr not implemented');
  }

  visitUnionType(ctx: UnionTypeContext): Node {
    throw new Error('visitUnionType not implemented');
  }

  visitTypeAtom(ctx: TypeAtomContext): Node {
    throw new Error('visitTypeAtom not implemented');
  }

  visitNamedType(ctx: NamedTypeContext): Node {
    throw new Error('visitNamedType not implemented');
  }

  visitRecordType(ctx: RecordTypeContext): Node {
    throw new Error('visitRecordType not implemented');
  }

  visitField(ctx: FieldContext): Node {
    throw new Error('visitField not implemented');
  }

  visitTupleType(ctx: TupleTypeContext): Node {
    throw new Error('visitTupleType not implemented');
  }

  visitLiteralType(ctx: LiteralTypeContext): Node {
    throw new Error('visitLiteralType not implemented');
  }

  visitItem(ctx: ItemContext): Node {
    throw new Error('visitItem not implemented');
  }

  visitFuncDecl(ctx: FuncDeclContext): Node {
    throw new Error('visitFuncDecl not implemented');
  }

  visitEffectDecl(ctx: EffectDeclContext): Node {
    throw new Error('visitEffectDecl not implemented');
  }

  visitTestDecl(ctx: TestDeclContext): Node {
    throw new Error('visitTestDecl not implemented');
  }

  visitParams(ctx: ParamsContext): Node {
    throw new Error('visitParams not implemented');
  }

  visitParam(ctx: ParamContext): Node {
    throw new Error('visitParam not implemented');
  }

  visitBlock(ctx: BlockContext): Node {
    throw new Error('visitBlock not implemented');
  }

  visitStmt(ctx: StmtContext): Node {
    throw new Error('visitStmt not implemented');
  }

  visitExpr(ctx: ExprContext): Node {
    throw new Error('visitExpr not implemented');
  }

  visitAssignmentExpr(ctx: AssignmentExprContext): Node {
    throw new Error('visitAssignmentExpr not implemented');
  }

  visitOrExpr(ctx: OrExprContext): Node {
    throw new Error('visitOrExpr not implemented');
  }

  visitAndExpr(ctx: AndExprContext): Node {
    throw new Error('visitAndExpr not implemented');
  }

  visitEqualityExpr(ctx: EqualityExprContext): Node {
    throw new Error('visitEqualityExpr not implemented');
  }

  visitRelationalExpr(ctx: RelationalExprContext): Node {
    throw new Error('visitRelationalExpr not implemented');
  }

  visitAdditiveExpr(ctx: AdditiveExprContext): Node {
    throw new Error('visitAdditiveExpr not implemented');
  }

  visitMultiplicativeExpr(ctx: MultiplicativeExprContext): Node {
    throw new Error('visitMultiplicativeExpr not implemented');
  }

  visitUnaryExpr(ctx: UnaryExprContext): Node {
    throw new Error('visitUnaryExpr not implemented');
  }

  visitPrimaryExpr(ctx: PrimaryExprContext): Node {
    throw new Error('visitPrimaryExpr not implemented');
  }

  visitLiteral(ctx: LiteralContext): Node {
    throw new Error('visitLiteral not implemented');
  }

  visitStringLiteral(ctx: StringLiteralContext): Node {
    throw new Error('visitStringLiteral not implemented');
  }
}
