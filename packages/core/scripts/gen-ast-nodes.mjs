import { readFileSync, writeFileSync } from "node:fs";
import { fileURLToPath } from "node:url";
import path from "node:path";
import ts from "typescript";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const visitorPath = path.resolve(__dirname, "../src/parser/visitor.ts");
const outPath = path.resolve(__dirname, "../src/ast/nodes.gen.ts");

const src = readFileSync(visitorPath, "utf8");
const sf = ts.createSourceFile("visitor.ts", src, ts.ScriptTarget.Latest, true);

const kinds = new Set();
function walk(node) {
  if (ts.isReturnStatement(node) && ts.isObjectLiteralExpression(node.expression)) {
    const obj = node.expression;
    const kindProp = obj.properties.find(
      (p) => ts.isPropertyAssignment(p) && p.name.getText(sf) === "kind" && ts.isStringLiteral(p.initializer),
    );
    if (kindProp) {
      kinds.add(kindProp.initializer.text);
    }
  }
  ts.forEachChild(node, walk);
}
walk(sf);

const list = Array.from(kinds).sort();
const lines = [];
lines.push("/** Generated by scripts/gen-ast-nodes.mjs â€“ DO NOT EDIT */");
lines.push(`export const NODE_KINDS = ${JSON.stringify(list, null, 2)} as const;`);
lines.push("export type NodeKind = typeof NODE_KINDS[number];");
writeFileSync(outPath, lines.join("\n") + "\n");
