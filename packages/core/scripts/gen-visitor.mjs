import { promises as fs } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

async function main() {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = path.dirname(__filename);
  const rootDir = path.resolve(__dirname, '..');
  const visitorPath = path.resolve(rootDir, 'src/generated/grammar/IntentLangVisitor.ts');
  const outPath = path.resolve(rootDir, 'src/parser/visitor.gen.ts');

  const src = await fs.readFile(visitorPath, 'utf8');

  const regex = /visit(\w+)\?: \(ctx: (\w+)\) => Result;/g;
  const methods = [];
  for (const match of src.matchAll(regex)) {
    const name = match[1];
    const ctx = match[2];
    methods.push({ name, ctx });
  }

  const ctxTypes = [...new Set(methods.map(m => m.ctx))].sort();

  const header = `// @generated\n// This file is auto-generated by scripts/gen-visitor.mjs.\n\n`;
  const imports = [
    `import type { IntentLangVisitor } from "../generated/grammar/IntentLangVisitor.js";`,
    `import type { ${ctxTypes.join(', ')} } from "../generated/grammar/IntentLangParser.js";`,
    `import type { ParserRuleContext } from "antlr4ts/ParserRuleContext.js";`,
    `import { TerminalNode } from "antlr4ts/tree/TerminalNode.js";`,
    `import { ErrorNode } from "antlr4ts/tree/ErrorNode.js";`,
    `import type { Node as AstNode } from "../ast.js";`,
    '',
    'type Node = AstNode<string>;',
    '',
  ].join('\n');

  const classStart = 'export class AstBuilderVisitorBase implements IntentLangVisitor<Node> {\n';
  const baseHelpers = [
    '  visit(ctx: ParserRuleContext): Node {',
    '    return ctx.accept(this);',
    '  }',
    '',
    '  visitChildren(node: ParserRuleContext): Node {',
    "    throw new Error('visitChildren not implemented');",
    '  }',
    '',
    '  visitTerminal(node: TerminalNode): Node {',
    "    throw new Error('visitTerminal not implemented');",
    '  }',
    '',
    '  visitErrorNode(node: ErrorNode): Node {',
    "    throw new Error('visitErrorNode not implemented');",
    '  }',
    '',
  ].join('\n');

  const methodStr = methods
    .map(({ name, ctx }) => `  visit${name}(ctx: ${ctx}): Node {\n    throw new Error(\'visit${name} not implemented\');\n  }\n`)
    .join('\n');

  const content = header + imports + classStart + baseHelpers + methodStr + '}\n';

  await fs.writeFile(outPath, content);
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
