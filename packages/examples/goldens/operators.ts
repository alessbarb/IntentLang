// _prelude.ts
export type Brand<B extends string> = { readonly __brand: B };
export type Result<T, E> = { type: "Ok"; value: T } | { type: "Err"; error: E };

export function fixed2Mul(
  a: number & Brand<"Fixed2">,
  b: number & Brand<"Fixed2">,
): number & Brand<"Fixed2"> {
  return (((a as number) * (b as number)) / 100) as number & Brand<"Fixed2">;
}

export interface Http {
  get(
    path: string,
  ): Promise<Result<unknown, { code: number; message: string }>>;
  post<T>(
    path: string,
    body: unknown,
  ): Promise<Result<T, { code: number; message: string }>>;
}
export interface Clock {
  now(): Date;
}
export interface Random {
  next(): number;
}

// Generated by IntentLang v1.2.0
// DO NOT EDIT MANUALLY

export type Brand<B extends string> = { readonly __brand: B };
export type Result<T, E> = { type: "Ok"; value: T } | { type: "Err"; error: E };
export type Option<T> = { kind: "some"; value: T } | { kind: "none" };
export type Capabilities = {};

export async function test_operators(): Promise<void> {
  let n = 5;
  n += 3;
  n -= 1;
  n *= 2;
  n /= 3;
  n %= 2;
  n++;
  n--;
  const mask = (n & 6) | 3;
  const xor = mask ^ 1;
  const inv = ~xor;
  const left = xor << 1;
  const right = xor >> 1;
  const label = n > 0 ? "pos" : "neg";
}
