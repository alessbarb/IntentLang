// Generated by IntentLang v1.2.0
// DO NOT EDIT MANUALLY
import type { Brand, Result } from "./_prelude";
import type { Http, Clock, Random } from "./_prelude";

// ---------- Types ----------
export type Email = string & Brand<"Email">;
export type BookingId = string & Brand<"BookingId">;
export type PassengerId = string & Brand<"PassengerId">;
export type MoneyCents = number & Brand<"MoneyCents">;

export type Currency = "EUR" | "USD";

export interface Price {
  amount: MoneyCents;
  currency: Currency;
}

export type SeatClass =
  | { type: "Economy" }
  | { type: "Business"; lounge: boolean }
  | { type: "First"; suite: boolean };

export interface Passenger {
  id: PassengerId;
  name: string;
  email: Email;
}

export interface Booking {
  id: BookingId;
  passenger: Passenger;
  flightId: string;
  seat: SeatClass;
  price: Price;
  createdAt: Date;
}

export interface BookingError {
  code: number;
  message: string;
}

// Collections (declared, no runtime use in this golden)
export type SeatMap = Map<string, SeatClass>;
export type PriceList = Array<Price>;

// ---------- Pure functions ----------
export function toEmail(s: string): Result<Email, string> {
  return /^[^@]+@[^@]+\.[^@]+$/.test(s)
    ? { type: "Ok", value: s as Email }
    : { type: "Err", error: "Invalid email" };
}

export function priceFromFloat(amount: number, currency: Currency): Price {
  if (!(amount >= 0.0)) throw new Error("Precondition failed");
  const cents = ((amount * 100.0) >> 0) as MoneyCents;
  return { amount: cents, currency };
}

export function chooseSeat(n: number): SeatClass {
  const m = n % 3;
  if (m === 0) {
    return { type: "Economy" };
  } else if (m === 1) {
    return { type: "Business", lounge: true };
  } else {
    return { type: "First", suite: false };
  }
}

export function seatLabel(s: SeatClass): string {
  if (s.type === "Economy") {
    return "E";
  } else if (s.type === "Business") {
    const _l = s.lounge;
    return "B";
  } else {
    const _s = s.suite;
    return "F";
  }
}

// ---------- Effects ----------
export async function createBooking(
  deps: { http: Http; clock: Clock; random: Random },
  input: {
    name: string;
    email: Email;
    flightId: string;
    basePrice: number;
    currency: Currency;
  },
): Promise<Result<Booking, BookingError>> {
  const rawId = deps.random.next().toString();
  const id = rawId as BookingId;

  const seat = chooseSeat((deps.random.next() * 10) >> 0);
  const price = priceFromFloat(input.basePrice, input.currency);

  const passenger: Passenger = {
    id: rawId as PassengerId,
    name: input.name,
    email: input.email,
  };

  return deps.http.post<Booking>("/bookings", {
    id,
    passenger,
    flightId: input.flightId,
    seat,
    price,
    createdAt: deps.clock.now(),
  });
}

export async function sendItinerary(
  deps: { http: Http },
  b: Booking,
): Promise<Result<boolean, BookingError>> {
  const label = seatLabel(b.seat);
  const payload = {
    to: b.passenger.email,
    subject: "Your itinerary",
    body: "Seat " + label + " for flight " + b.flightId,
  };
  return deps.http.post<boolean>("/emails", payload);
}

// ---------- Test ----------
export async function test_booking_flow(): Promise<void> {
  const e = toEmail("user@example.com");
  const p = priceFromFloat(123.45, "EUR");
  const lab = seatLabel({ type: "Economy" });
}
