{"source_il":"types {\n  type Fixed2 = Int brand \"Fixed2\";\n}\n\nfunc mul(a: Fixed2, b: Fixed2): Fixed2\n{\n  return fixed2Mul(a, b);\n}\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Brand } from \"./_prelude\";\nimport { fixed2Mul } from \"./_prelude\";\n\nexport type Fixed2 = number & Brand<\"Fixed2\">;\nexport function mul(a: Fixed2, b: Fixed2): Fixed2 {\n  return fixed2Mul(a, b);\n}\n","ast":null}
{"source_il":"intent \"Invoice service\"\n\r\nuses {\r\n  http: Http { baseUrl: \"https://api.example.com\", timeoutMs: 3000 },\r\n  clock: Clock {},\r\n}\r\n\r\ntypes {\r\n  type InvoiceId = Uuid;\r\n  type Invoice = {\r\n    id: InvoiceId,\r\n    orderId: Uuid,\r\n    issuedAt: DateTime,\r\n  };\r\n  type InvoiceError = { code: Int, message: String };\r\n}\r\n\r\neffect generateInvoice(orderId: Uuid): Result<Invoice, InvoiceError> uses http, clock {\n  return http.post(\"/invoices\", { orderId, issuedAt: clock.now() });\n}\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Result } from \"./_prelude\";\nimport type { Http, Clock } from \"./_prelude\";\n\nexport type InvoiceId = string;\nexport interface Invoice {\n  id: InvoiceId;\n  orderId: string;\n  issuedAt: Date;\n}\nexport interface InvoiceError {\n  code: number;\n  message: string;\n}\n\nexport async function generateInvoice(\n  deps: { http: Http; clock: Clock },\n  orderId: string,\n): Promise<Result<Invoice, InvoiceError>> {\n  return deps.http.post<Invoice>(\"/invoices\", {\n    orderId,\n    issuedAt: deps.clock.now(),\n  });\n}\n","ast":null}
{"source_il":"intent \"Notification service\" tags [\"notifications\"]\r\n\r\nuses {\r\n  http: Http { baseUrl: \"https://api.example.com\", timeoutMs: 3000 },\r\n}\r\n\r\ntypes {\r\n  type NotificationId = Uuid;\r\n  type Notification = {\r\n    id: NotificationId,\r\n    userId: Uuid,\r\n    message: String,\r\n  };\r\n  type NotificationError = { code: Int, message: String };\r\n}\r\n\r\neffect sendNotification(input: { userId: Uuid, message: String }): Result<Notification, NotificationError> uses http {\n  return http.post(\"/notifications\", input);\n}\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Result } from \"./_prelude\";\nimport type { Http } from \"./_prelude\";\n\nexport type NotificationId = string;\nexport interface Notification {\n  id: NotificationId;\n  userId: string;\n  message: string;\n}\nexport interface NotificationError {\n  code: number;\n  message: string;\n}\n\nexport async function sendNotification(\n  deps: { http: Http },\n  input: { userId: string; message: string },\n): Promise<Result<Notification, NotificationError>> {\n  return deps.http.post<Notification>(\"/notifications\", input);\n}\n","ast":null}
{"source_il":"intent \"Order service\" tags [\"api\",\"orders\"]\r\n\r\nuses {\r\n  http: Http { baseUrl: \"https://api.example.com\", timeoutMs: 3000 },\r\n  random: Random { seed: 42 },\r\n}\r\n\r\ntypes {\r\n  type OrderId = Uuid;\r\n  type Order = {\r\n    id: OrderId,\r\n    userId: Uuid,\r\n    total: Float where _ >= 0,\r\n  };\r\n  type OrderError = { code: Int, message: String };\r\n}\r\n\r\neffect createOrder(input: { userId: Uuid, total: Float }): Result<Order, OrderError> uses http, random {\r\n  let id = random.next().toString();\r\n  return http.post(\"/orders\", { id: brand<OrderId>(id), userId: input.userId, total: input.total });\r\n}\r\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Result } from \"./_prelude\";\nimport type { Http, Random } from \"./_prelude\";\n\nexport type OrderId = string;\nexport interface Order {\n  id: OrderId;\n  userId: string;\n  total: number;\n}\nexport interface OrderError {\n  code: number;\n  message: string;\n}\n\nexport async function createOrder(\n  deps: { http: Http; random: Random },\n  input: { userId: string; total: number },\n): Promise<Result<Order, OrderError>> {\n  const id = deps.random.next().toString() as OrderId;\n  return deps.http.post<Order>(\"/orders\", {\n    id,\n    userId: input.userId,\n    total: input.total,\n  });\n}\n","ast":null}
{"source_il":"intent \"Payment service\" tags [\"payments\"]\r\n\r\nuses {\r\n  http: Http { baseUrl: \"https://api.example.com\", timeoutMs: 3000 },\r\n}\r\n\r\ntypes {\r\n  type CardNumber = String brand \"CardNumber\" where matches(\"^\\\\d{16}$\");\r\n  type PaymentId = Uuid;\r\n  type Payment =\r\n    | Card { id: PaymentId, card: CardNumber }\r\n    | Cash { id: PaymentId, amount: Float where _ >= 0 };\r\n  type PaymentError = { code: Int, message: String };\r\n}\r\n\r\neffect processPayment(p: Payment): Result<Bool, PaymentError> uses http {\n  return http.post(\"/payments\", p);\n}\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Brand, Result } from \"./_prelude\";\nimport type { Http } from \"./_prelude\";\n\nexport type CardNumber = string & Brand<\"CardNumber\">;\nexport type PaymentId = string;\nexport type Payment =\n  | { type: \"Card\"; id: PaymentId; card: CardNumber }\n  | { type: \"Cash\"; id: PaymentId; amount: number };\nexport interface PaymentError {\n  code: number;\n  message: string;\n}\n\nexport async function processPayment(\n  deps: { http: Http },\n  p: Payment,\n): Promise<Result<boolean, PaymentError>> {\n  return deps.http.post<boolean>(\"/payments\", p);\n}\n","ast":null}
{"source_il":"intent \"User service\" tags [\"api\",\"users\"]\r\n\r\nuses {\r\n  http: Http { baseUrl: \"https://api.example.com\", timeoutMs: 2500 },\r\n  clock: Clock {},\r\n}\r\n\r\ntypes {\r\n  type Email = String brand \"Email\" where matches(\"^[^@]+@[^@]+\\\\.[^@]+$\");\r\n  type UserId = Uuid;\r\n  type User = {\r\n    id: UserId,\r\n    name: String where _.length >= 2,\r\n    email: Email,\r\n    createdAt: DateTime,\r\n  };\r\n  type ApiError = { code: Int, message: String };\r\n}\r\n\r\nfunc toEmail(s: String): Result<Email, String> {\r\n  if matches(\"^[^@]+@[^@]+\\\\.[^@]+$\", s) {\r\n    return Ok(brand<Email>(s));\r\n  } else {\r\n    return Err(\"Invalid email\");\r\n  }\r\n}\r\n\r\neffect createUser(input: { name: String, email: Email }): Result<User, ApiError> uses http, clock {\r\n  return http.post(\"/users\", {\r\n    name: input.name,\r\n    email: input.email,\r\n    createdAt: clock.now(),\r\n  });\r\n}\r\n","transpiled_ts":"// Generated by IntentLang v1.2.0\n// DO NOT EDIT MANUALLY\nimport type { Brand, Result } from \"./_prelude\";\nimport type { Http, Clock } from \"./_prelude\";\n\nexport type Email = string & Brand<\"Email\">;\nexport type UserId = string;\nexport interface User {\n  id: UserId;\n  name: string;\n  email: Email;\n  createdAt: Date;\n}\nexport interface ApiError {\n  code: number;\n  message: string;\n}\n\nexport function toEmail(s: string): Result<Email, string> {\n  return /^[^@]+@[^@]+\\.[^@]+$/.test(s)\n    ? { type: \"Ok\", value: s as Email }\n    : { type: \"Err\", error: \"Invalid email\" };\n}\n\nexport async function createUser(\n  deps: { http: Http; clock: Clock },\n  input: { name: string; email: Email },\n): Promise<Result<User, ApiError>> {\n  return deps.http.post<User>(\"/users\", {\n    ...input,\n    createdAt: deps.clock.now(),\n  });\n}\n","ast":null}
